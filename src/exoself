#!/usr/bin/python
# 
# The BSD License
# 
# Copyright (c) 2008, Florian Noeding
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# Neither the name of the of the author nor the names of its contributors may be
# used to endorse or promote products derived from this software without specific
# prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 


import setuppaths

import os
import sys
from optparse import OptionParser, OptionGroup

from errors import CompileError, RecoverableCompileError
from source2ast import sourcecode2AST, AST2StringAST, AST2DOT, AST2PNG, AST2StringAST
from ast2llvm import ModuleTranslator
from typeannotator import ASTTypeAnnotator

import llvm
import llvm.core
import llvm.ee
import llvm.passes


optPasses = {}
optPasses[0] = ('no optimizations', []) # level 0 must stay at no optimizations! otherwise change code below...
optPasses[1] = ('mem2reg, instcombine, dce, reassociate, gvn, simplifycfg',
		[llvm.passes.PASS_PROMOTE_MEMORY_TO_REGISTER,
				llvm.passes.PASS_INSTRUCTION_COMBINING,
				llvm.passes.PASS_DEAD_CODE_ELIMINATION,
				llvm.passes.PASS_REASSOCIATE,
				llvm.passes.PASS_GVN,
				llvm.passes.PASS_CFG_SIMPLIFICATION,
				])


def optimizeModule(module, passes, targetData=''):
	pm = llvm.passes.PassManager.new()
	pm.add(llvm.ee.TargetData.new(targetData)) # mandatory first pass: target specific data

	for x in passes:
		pm.add(x)

	pm.run(module)

	del pm


def main():
	op = OptionParser()
	op.set_usage('Usage: %prog [options] input.es [input2.es [...]]')
	op.add_option('-c', help='compile only, do not link', dest='compileOnly', action='store_true')
	op.add_option('-A', help='generate ast only', dest='astOnly', action='store_true')
	op.add_option('-S', help='assemble only', dest='asmOnly', action='store_true')

	op.add_option('--save-temps', help='save temporary files in current directory', dest='saveTemps', action='store_true')
	op.add_option('--ast2dot', help='save AST as a DOT file for graphviz', dest='ast2dot', action='store_true')
	op.add_option('--ast2png', help='save AST as a png file (needs graphviz / dot)', dest='ast2png', action='store_true')


	optUsage = []
	for lvl in optPasses:
		optUsage.append('optimization level %d: %s' % (lvl, optPasses[lvl][0]))
	optUsage = '; '.join(optUsage) # FIXME fix the formatting: newlines are simply ignored
	optOG = OptionGroup(op, 'optimization settings', optUsage)
	optOG.add_option('-O', help='optimization level' , dest='optLevel', default=1, type='int')

	op.add_option_group(optOG)

	


	options, args = op.parse_args()

	if len(args) != 1:
		op.error('only exactly 1 file at a time supported right now')
	
	if options.optLevel not in optPasses:
		op.error('optimization level not supported')

	# make filenames absolute
	for i in range(len(args)):
		args[i] = os.path.abspath(args[i])


	fn = args[0]
	path, fn = os.path.split(fn)
	if '.' in fn:
		baseFN = fn[0:fn.rfind('.')]
	else:
		baseFN = fn
	fn = os.path.join(path, fn)
	source = file(fn).read()

	# build AST
	numErrors, ast = sourcecode2AST(source)
	if numErrors:
		print '%d errors occured\naborting' % numErrors
		return 1

	if options.saveTemps or options.astOnly:
		f = file('%s.ast' % baseFN, 'wt')
		f.write(AST2StringAST(ast))
		f.close()

	if options.ast2dot:
		f = file('%s.dot' % baseFN, 'wt')
		f.write(AST2DOT(ast))
		f.close()

	if options.ast2png:
		f = file('%s.png' % baseFN, 'wt')
		f.write(AST2PNG(ast))
		f.close()

	if options.astOnly:
		return 0


	# annotate ast
	ta = ASTTypeAnnotator()
	try:
		ta.walkAST(ast, fn, source)
	except CompileError, e:
		print e.message.rstrip()
		print 'aborting'
		return 1


	# build llvm IR
	mt = ModuleTranslator()
	try:
		module = mt.walkAST(ast, fn, source)
	except CompileError, e:
		print e.message.rstrip()
		print 'aborting'
		return 1

	# optimize IR
	if options.optLevel != 0:
		if options.saveTemps:
			f = file('%s.preopt.ll' % baseFN, 'wt')
			f.write(str(module))
			f.close()

		optimizeModule(module, optPasses[options.optLevel][1])

	if options.saveTemps or options.asmOnly:
		f = file('%s.ll' % baseFN, 'wt')
		f.write(str(module))
		f.close()

	if options.asmOnly:
		return 0

	# compile llvm IR to bytecode
	f = file('%s.bc' % baseFN, 'wb')
	module.to_bitcode(f)
	f.close()
	if options.compileOnly:
		return 0

	return 0 # linking not implemented...


if __name__ == '__main__':
	sys.exit(main())

